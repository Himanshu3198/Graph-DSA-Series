// 924. Minimize Malware Spread

class Solution {
public:
    
       vector<int>parent;
       vector<int>rank;
      
    
    int find(int x){
        
        if(parent[x]==x) return x;
        
         return parent[x]=find(parent[x]);
    }
    
    void union_op(int x,int y){
        
       
        if(x==y){
            return;
        }
        if(rank[x]>rank[y]){
            
            parent[y]=x;
            rank[x]+=rank[y];
        }
        else{
            parent[x]=y;
            rank[y]+=rank[x];
        }
        
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& ini) {
     
          int n=graph.size();
        
         parent.resize(n);
        rank.resize(n);
        
        for(int i=0;i<n;i++){
            parent[i]=i;
            rank[i]=1;
        }
        
        
         for(int i=0;i<n;i++){
             
             for(int j=i+1;j<n;j++){
                 
                 if(graph[i][j]==1){
                     
                     int x=find(i);
                     int y=find(j);
                     
                     union_op(x,y);
                 }
             }
         }
        
        sort(ini.begin(),ini.end());
      
        
         vector<int>temp(n,0);
        
         
        for(auto it:ini){
            
            int x=find(it);
            temp[x]++;
        }
        
        int maxInfect=0;
        
         int idx=ini[0];
        
         for(auto it:ini){
            
            int x=find(it);
            
              if(temp[x]==1 and rank[x]>maxInfect){
                  
                  maxInfect=rank[x];
                  
                  idx=it;
              }
        }
        
        return idx;
        
                     
    }
};
