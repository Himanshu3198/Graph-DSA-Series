class Solution
{
    public:

        void dfs(unordered_map<int, vector < int>> &graph, int node, vector< int > &dist, vector< int > &vis, int dis)
        {

            if (vis[node]) return;
            vis[node] = 1;
           
            dist[node] = dis + 1;
            vector<int> nbr = graph[node];
            if (nbr[0] != -1 && vis[nbr[0]] == 0)
            {
                dfs(graph, nbr[0], dist, vis, dis + 1);
            }
        }
    int closestMeetingNode(vector<int> &edges, int node1, int node2)
    {
        unordered_map<int, vector < int>> graph;
        for (int i = 0; i < edges.size(); i++)
        {

            graph[i].push_back(edges[i]);
        }
        vector<int> dist1(graph.size(), INT_MAX), dist2(graph.size(), INT_MAX);
        vector<int> vis(graph.size(), 0);
        dfs(graph, node1, dist1, vis, 0);
        vis.assign(graph.size(), 0);
        dfs(graph, node2, dist2, vis, 0);
        if (node1 == node2) return node1;
        int ans = INT_MAX, minDis = INT_MAX;
        for (int i = 0; i < graph.size(); i++)
        {

            if (dist1[i] != INT_MAX && dist2[i] != INT_MAX)
            {
                int temp = max(dist1[i], dist2[i]);
                if (temp < minDis)
                {
                    minDis = temp;
                    ans = i;
                }
            }
        }
        return ans == INT_MAX ? -1 : ans;
    }
};
static bool _foo = ios::sync_with_stdio(false);
static ostream *_bar = cin.tie(NULL);
